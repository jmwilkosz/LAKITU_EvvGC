ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"comio.c"
  14              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.8.4 20140526 (release) [ARM/embedded-4_8-
  15              	@	compiled by GNU C version 4.6.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=99 --param ggc-min-heapsize=131015
  17              	@ options passed:  -I . -I src -I Libraries -I Libraries/CMSIS/Include
  18              	@ -I Libraries/CMSIS/Device/ST/STM32F10x/Include
  19              	@ -I Libraries/STM32F10x_StdPeriph_Driver/inc
  20              	@ -I Libraries/STM32_USB-FS-Device_Driver/inc -I src/VCP/inc
  21              	@ -imultilib armv7-m
  22              	@ -iprefix c:\program files (x86)\gnu tools arm embedded\4.8 2014q2\bin\../lib/gcc/arm-none-eabi/4.
  23              	@ -isysroot c:\program files (x86)\gnu tools arm embedded\4.8 2014q2\bin\../arm-none-eabi
  24              	@ -MD out/comio.d -MF out/comio.d -MP -MQ out/comio.o -D__USES_INITFINI__
  25              	@ -D STM32F10X_HD -D USE_STDPERIPH_DRIVER src/comio.c -mcpu=cortex-m3
  26              	@ -mthumb -auxbase-strip out/comio.o -O2 -Wall -Wstrict-prototypes -Wextra
  27              	@ -std=gnu99 -ffunction-sections -fdata-sections -fverbose-asm
  28              	@ -fsingle-precision-constant
  29              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  30              	@ -fbranch-count-reg -fcaller-saves -fcombine-stack-adjustments -fcommon
  31              	@ -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  32              	@ -fdata-sections -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
  33              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  34              	@ -fexpensive-optimizations -fforward-propagate -ffunction-cse
  35              	@ -ffunction-sections -fgcse -fgcse-lm -fgnu-runtime
  36              	@ -fguess-branch-probability -fhoist-adjacent-loads -fident -fif-conversion
  37              	@ -fif-conversion2 -findirect-inlining -finline -finline-atomics
  38              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  39              	@ -fipa-profile -fipa-pure-const -fipa-reference -fipa-sra
  40              	@ -fira-hoist-pressure -fira-share-save-slots -fira-share-spill-slots
  41              	@ -fivopts -fkeep-static-consts -fleading-underscore -fmath-errno
  42              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  43              	@ -fomit-frame-pointer -foptimize-register-move -foptimize-sibling-calls
  44              	@ -foptimize-strlen -fpartial-inlining -fpeephole -fpeephole2
  45              	@ -fprefetch-loop-arrays -freg-struct-return -fregmove -freorder-blocks
  46              	@ -freorder-functions -frerun-cse-after-loop
  47              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  48              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  49              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  50              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  51              	@ -fschedule-insns2 -fsection-anchors -fshow-column -fshrink-wrap
  52              	@ -fsigned-zeros -fsingle-precision-constant -fsplit-ivs-in-unroller
  53              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  54              	@ -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
  55              	@ -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
  56              	@ -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
  57              	@ -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 2


  58              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
  59              	@ -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
  60              	@ -ftree-parallelize-loops= -ftree-phiprop -ftree-pre -ftree-pta
  61              	@ -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slp-vectorize
  62              	@ -ftree-slsr -ftree-sra -ftree-switch-conversion -ftree-tail-merge
  63              	@ -ftree-ter -ftree-vect-loop-version -ftree-vrp -funit-at-a-time
  64              	@ -fverbose-asm -fzero-initialized-in-bss -mfix-cortex-m3-ldrd
  65              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  66              	@ -munaligned-access -mvectorize-with-neon-quad
  67              	
  68              		.section	.text.ComInit,"ax",%progbits
  69              		.align	2
  70              		.global	ComInit
  71              		.thumb
  72              		.thumb_func
  73              		.type	ComInit, %function
  74              	ComInit:
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77 0000 08B5     		push	{r3, lr}	@
  78 0002 FFF7FEFF 		bl	Usart4Init	@
  79 0006 0748     		ldr	r0, .L2	@,
  80 0008 FFF7FEFF 		bl	USART_PutString	@
  81 000c FFF7FEFF 		bl	USART_Flush	@
  82 0010 FFF7FEFF 		bl	setupUSB	@
  83 0014 0448     		ldr	r0, .L2+4	@,
  84 0016 FFF7FEFF 		bl	USART_PutString	@
  85 001a BDE80840 		pop	{r3, lr}	@
  86 001e FFF7FEBF 		b	USART_Flush	@
  87              	.L3:
  88 0022 00BF     		.align	2
  89              	.L2:
  90 0024 00000000 		.word	.LC0
  91 0028 10000000 		.word	.LC1
  92              		.size	ComInit, .-ComInit
  93              		.section	.text.print,"ax",%progbits
  94              		.align	2
  95              		.global	print
  96              		.thumb
  97              		.thumb_func
  98              		.type	print, %function
  99              	print:
 100              		@ args = 4, pretend = 16, frame = 264
 101              		@ frame_needed = 0, uses_anonymous_args = 1
 102 0000 0FB4     		push	{r0, r1, r2, r3}	@
 103 0002 10B5     		push	{r4, lr}	@
 104 0004 C2B0     		sub	sp, sp, #264	@,,
 105 0006 44AC     		add	r4, sp, #272	@ tmp112,,
 106 0008 54F8042B 		ldr	r2, [r4], #4	@ fmt, fmt
 107 000c FF21     		movs	r1, #255	@,
 108 000e 2346     		mov	r3, r4	@, tmp112
 109 0010 02A8     		add	r0, sp, #8	@,,
 110 0012 0194     		str	r4, [sp, #4]	@ tmp112, MEM[(struct  *)&vlist].__ap
 111 0014 FFF7FEFF 		bl	vsnprintf	@
 112 0018 02A8     		add	r0, sp, #8	@,,
 113 001a FFF7FEFF 		bl	USART_PutString	@
 114 001e 02A8     		add	r0, sp, #8	@,,
ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 3


 115 0020 FFF7FEFF 		bl	strlen	@
 116 0024 0146     		mov	r1, r0	@ tmp121,
 117 0026 02A8     		add	r0, sp, #8	@,,
 118 0028 FFF7FEFF 		bl	usbSendBytes	@
 119 002c 42B0     		add	sp, sp, #264	@,,
 120              		@ sp needed	@
 121 002e BDE81040 		pop	{r4, lr}	@
 122 0032 04B0     		add	sp, sp, #16	@,,
 123 0034 7047     		bx	lr	@
 124              		.size	print, .-print
 125 0036 00BF     		.section	.text.printUSART,"ax",%progbits
 126              		.align	2
 127              		.global	printUSART
 128              		.thumb
 129              		.thumb_func
 130              		.type	printUSART, %function
 131              	printUSART:
 132              		@ args = 4, pretend = 16, frame = 264
 133              		@ frame_needed = 0, uses_anonymous_args = 1
 134 0000 0FB4     		push	{r0, r1, r2, r3}	@
 135 0002 10B5     		push	{r4, lr}	@
 136 0004 C2B0     		sub	sp, sp, #264	@,,
 137 0006 44AC     		add	r4, sp, #272	@ tmp111,,
 138 0008 54F8042B 		ldr	r2, [r4], #4	@ fmt, fmt
 139 000c FF21     		movs	r1, #255	@,
 140 000e 2346     		mov	r3, r4	@, tmp111
 141 0010 02A8     		add	r0, sp, #8	@,,
 142 0012 0194     		str	r4, [sp, #4]	@ tmp111, MEM[(struct  *)&vlist].__ap
 143 0014 FFF7FEFF 		bl	vsnprintf	@
 144 0018 02A8     		add	r0, sp, #8	@,,
 145 001a FFF7FEFF 		bl	USART_PutString	@
 146 001e 42B0     		add	sp, sp, #264	@,,
 147              		@ sp needed	@
 148 0020 BDE81040 		pop	{r4, lr}	@
 149 0024 04B0     		add	sp, sp, #16	@,,
 150 0026 7047     		bx	lr	@
 151              		.size	printUSART, .-printUSART
 152              		.section	.text.printDirect,"ax",%progbits
 153              		.align	2
 154              		.global	printDirect
 155              		.thumb
 156              		.thumb_func
 157              		.type	printDirect, %function
 158              	printDirect:
 159              		@ args = 4, pretend = 16, frame = 264
 160              		@ frame_needed = 0, uses_anonymous_args = 1
 161 0000 0FB4     		push	{r0, r1, r2, r3}	@
 162 0002 10B5     		push	{r4, lr}	@
 163 0004 C2B0     		sub	sp, sp, #264	@,,
 164 0006 44AC     		add	r4, sp, #272	@ tmp111,,
 165 0008 54F8042B 		ldr	r2, [r4], #4	@ fmt, fmt
 166 000c FF21     		movs	r1, #255	@,
 167 000e 2346     		mov	r3, r4	@, tmp111
 168 0010 02A8     		add	r0, sp, #8	@,,
 169 0012 0194     		str	r4, [sp, #4]	@ tmp111, MEM[(struct  *)&vlist].__ap
 170 0014 FFF7FEFF 		bl	vsnprintf	@
 171 0018 02A8     		add	r0, sp, #8	@,,
ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 4


 172 001a FFF7FEFF 		bl	USART_PutStringDirect	@
 173 001e 42B0     		add	sp, sp, #264	@,,
 174              		@ sp needed	@
 175 0020 BDE81040 		pop	{r4, lr}	@
 176 0024 04B0     		add	sp, sp, #16	@,,
 177 0026 7047     		bx	lr	@
 178              		.size	printDirect, .-printDirect
 179              		.section	.text.UnGetChar,"ax",%progbits
 180              		.align	2
 181              		.global	UnGetChar
 182              		.thumb
 183              		.thumb_func
 184              		.type	UnGetChar, %function
 185              	UnGetChar:
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189 0000 014B     		ldr	r3, .L8	@ tmp112,
 190 0002 1860     		str	r0, [r3]	@ c, lastChar
 191 0004 7047     		bx	lr	@
 192              	.L9:
 193 0006 00BF     		.align	2
 194              	.L8:
 195 0008 00000000 		.word	.LANCHOR0
 196              		.size	UnGetChar, .-UnGetChar
 197              		.section	.text.GetChar,"ax",%progbits
 198              		.align	2
 199              		.global	GetChar
 200              		.thumb
 201              		.thumb_func
 202              		.type	GetChar, %function
 203              	GetChar:
 204              		@ args = 0, pretend = 0, frame = 8
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206 0000 00B5     		push	{lr}	@
 207 0002 0C4B     		ldr	r3, .L16	@ tmp115,
 208 0004 83B0     		sub	sp, sp, #12	@,,
 209 0006 1868     		ldr	r0, [r3]	@ lastChar.1, lastChar
 210 0008 0028     		cmp	r0, #0	@ lastChar.1,
 211 000a 05DB     		blt	.L15	@,
 212 000c 4FF0FF32 		mov	r2, #-1	@ tmp118,
 213 0010 1A60     		str	r2, [r3]	@ tmp118, lastChar
 214              	.L13:
 215 0012 03B0     		add	sp, sp, #12	@,,
 216              		@ sp needed	@
 217 0014 5DF804FB 		ldr	pc, [sp], #4	@
 218              	.L15:
 219 0018 FFF7FEFF 		bl	usbBytesAvailable	@
 220 001c 38B1     		cbz	r0, .L12	@,
 221 001e 0DF10700 		add	r0, sp, #7	@,,
 222 0022 0121     		movs	r1, #1	@,
 223 0024 FFF7FEFF 		bl	usbReceiveBytes	@
 224 0028 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2	@ D.5364, c
 225 002c F1E7     		b	.L13	@
 226              	.L12:
 227 002e FFF7FEFF 		bl	USART_GetChar	@
 228 0032 EEE7     		b	.L13	@
ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 5


 229              	.L17:
 230              		.align	2
 231              	.L16:
 232 0034 00000000 		.word	.LANCHOR0
 233              		.size	GetChar, .-GetChar
 234              		.section	.text.ComFlushInput,"ax",%progbits
 235              		.align	2
 236              		.global	ComFlushInput
 237              		.thumb
 238              		.thumb_func
 239              		.type	ComFlushInput, %function
 240              	ComFlushInput:
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243 0000 10B5     		push	{r4, lr}	@
 244 0002 0024     		movs	r4, #0	@ loop,
 245 0004 02E0     		b	.L19	@
 246              	.L22:
 247 0006 642C     		cmp	r4, #100	@ loop,
 248 0008 04D0     		beq	.L20	@,
 249 000a 0134     		adds	r4, r4, #1	@ loop, loop,
 250              	.L19:
 251 000c FFF7FEFF 		bl	GetChar	@
 252 0010 0028     		cmp	r0, #0	@,
 253 0012 F8DA     		bge	.L22	@,
 254              	.L20:
 255 0014 2046     		mov	r0, r4	@, loop
 256 0016 10BD     		pop	{r4, pc}	@
 257              		.size	ComFlushInput, .-ComFlushInput
 258              		.section	.text.CharAvailable,"ax",%progbits
 259              		.align	2
 260              		.global	CharAvailable
 261              		.thumb
 262              		.thumb_func
 263              		.type	CharAvailable, %function
 264              	CharAvailable:
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 08B5     		push	{r3, lr}	@
 268 0002 FFF7FEFF 		bl	usbBytesAvailable	@
 269 0006 18B9     		cbnz	r0, .L25	@,
 270 0008 BDE80840 		pop	{r3, lr}	@
 271 000c FFF7FEBF 		b	USART_Available	@
 272              	.L25:
 273 0010 BDE80840 		pop	{r3, lr}	@
 274 0014 FFF7FEBF 		b	usbBytesAvailable	@
 275              		.size	CharAvailable, .-CharAvailable
 276              		.section	.text.PutChar,"ax",%progbits
 277              		.align	2
 278              		.global	PutChar
 279              		.thumb
 280              		.thumb_func
 281              		.type	PutChar, %function
 282              	PutChar:
 283              		@ args = 0, pretend = 0, frame = 8
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285 0000 10B5     		push	{r4, lr}	@
ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 6


 286 0002 82B0     		sub	sp, sp, #8	@,,
 287 0004 02AC     		add	r4, sp, #8	@ tmp114,,
 288 0006 04F8010D 		strb	r0, [r4, #-1]!	@ c, c
 289 000a FFF7FEFF 		bl	USART_PutChar	@
 290 000e 2046     		mov	r0, r4	@, tmp114
 291 0010 0121     		movs	r1, #1	@,
 292 0012 FFF7FEFF 		bl	usbSendBytes	@
 293 0016 02B0     		add	sp, sp, #8	@,,
 294              		@ sp needed	@
 295 0018 10BD     		pop	{r4, pc}	@
 296              		.size	PutChar, .-PutChar
 297 001a 00BF     		.section	.text.DEBUG_PutChar,"ax",%progbits
 298              		.align	2
 299              		.global	DEBUG_PutChar
 300              		.thumb
 301              		.thumb_func
 302              		.type	DEBUG_PutChar, %function
 303              	DEBUG_PutChar:
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307 0000 7047     		bx	lr	@
 308              		.size	DEBUG_PutChar, .-DEBUG_PutChar
 309 0002 00BF     		.section	.text.DEBUG_PutString,"ax",%progbits
 310              		.align	2
 311              		.global	DEBUG_PutString
 312              		.thumb
 313              		.thumb_func
 314              		.type	DEBUG_PutString, %function
 315              	DEBUG_PutString:
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318 0000 08B5     		push	{r3, lr}	@
 319 0002 FFF7FEFF 		bl	USART_PutString	@
 320 0006 BDE80840 		pop	{r3, lr}	@
 321 000a FFF7FEBF 		b	USART_Flush	@
 322              		.size	DEBUG_PutString, .-DEBUG_PutString
 323 000e 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 324              		.align	2
 325              	.LC0:
 326 0000 73657475 		.ascii	"setup USB...\015\012\000"
 326      70205553 
 326      422E2E2E 
 326      0D0A00
 327 000f 00       		.space	1
 328              	.LC1:
 329 0010 73657475 		.ascii	"setup USB done\015\012\000"
 329      70205553 
 329      4220646F 
 329      6E650D0A 
 329      00
 330 0021 000000   		.section	.data.lastChar,"aw",%progbits
 331              		.align	2
 332              		.set	.LANCHOR0,. + 0
 333              		.type	lastChar, %object
 334              		.size	lastChar, 4
 335              	lastChar:
ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 7


 336 0000 FFFFFFFF 		.word	-1
 337              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
ARM GAS  C:\cygwin64\tmp\ccmWBokm.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 comio.c
C:\cygwin64\tmp\ccmWBokm.s:69     .text.ComInit:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:74     .text.ComInit:00000000 ComInit
C:\cygwin64\tmp\ccmWBokm.s:90     .text.ComInit:00000024 $d
C:\cygwin64\tmp\ccmWBokm.s:94     .text.print:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:99     .text.print:00000000 print
C:\cygwin64\tmp\ccmWBokm.s:126    .text.printUSART:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:131    .text.printUSART:00000000 printUSART
C:\cygwin64\tmp\ccmWBokm.s:153    .text.printDirect:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:158    .text.printDirect:00000000 printDirect
C:\cygwin64\tmp\ccmWBokm.s:180    .text.UnGetChar:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:185    .text.UnGetChar:00000000 UnGetChar
C:\cygwin64\tmp\ccmWBokm.s:195    .text.UnGetChar:00000008 $d
C:\cygwin64\tmp\ccmWBokm.s:198    .text.GetChar:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:203    .text.GetChar:00000000 GetChar
C:\cygwin64\tmp\ccmWBokm.s:232    .text.GetChar:00000034 $d
C:\cygwin64\tmp\ccmWBokm.s:235    .text.ComFlushInput:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:240    .text.ComFlushInput:00000000 ComFlushInput
C:\cygwin64\tmp\ccmWBokm.s:259    .text.CharAvailable:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:264    .text.CharAvailable:00000000 CharAvailable
C:\cygwin64\tmp\ccmWBokm.s:277    .text.PutChar:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:282    .text.PutChar:00000000 PutChar
C:\cygwin64\tmp\ccmWBokm.s:298    .text.DEBUG_PutChar:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:303    .text.DEBUG_PutChar:00000000 DEBUG_PutChar
C:\cygwin64\tmp\ccmWBokm.s:310    .text.DEBUG_PutString:00000000 $t
C:\cygwin64\tmp\ccmWBokm.s:315    .text.DEBUG_PutString:00000000 DEBUG_PutString
C:\cygwin64\tmp\ccmWBokm.s:324    .rodata.str1.4:00000000 $d
C:\cygwin64\tmp\ccmWBokm.s:331    .data.lastChar:00000000 $d
C:\cygwin64\tmp\ccmWBokm.s:335    .data.lastChar:00000000 lastChar

UNDEFINED SYMBOLS
Usart4Init
USART_PutString
USART_Flush
setupUSB
vsnprintf
strlen
usbSendBytes
USART_PutStringDirect
usbBytesAvailable
usbReceiveBytes
USART_GetChar
USART_Available
USART_PutChar
